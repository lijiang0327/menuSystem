#! /usr/bin/env node
try {
    var colors = require('colors'),
        fs = require('fs'),
        path = require('path'),
        cproc = require('child_process'),
        async = require('async');
}
catch (e) {
    if(e.code === 'MODULE_NOT_FOUND') {
        process.stdout.write('Menu coule not be started because it is dependencies have not been installed \n');
        process.stdout.write('Please ensure that you have executed "npm install" prior to running Menu. \n');
        process.stdout.write('Could not start: ' + e.code + '\n');
        process.exit(1);
    }
}

var getRunningPid = function(callback) {
    fs.readFile(path.join(__dirname, '/pidfile'), 'utf-8', (err, pid) => {
        console.log(err);
        if(err) {
            return callback(err);
        }
        
        try {
            // process.kill(parseInt(pid, 10), 0);
            callback(null, parseInt(pid, 10));
        } catch (error) {
            callback(error);
        }
    });
}

switch(process.argv[2]) {
    case 'start': 
        process.stdout.write('\nStarting Menu\n'.bold);
        process.stdout.write(' "' + './menu stop'.green + '" to stop Menu server\n');
        process.stdout.write(' "' + './menu log'.green + '" to view server output\n');
        process.stdout.write(' "' + './menu restart'.green + '" to restart Menu \n');

        process.env.NODE_ENV = "product";
        cproc.fork(path.join(__dirname, 'loader.js'), [], {env: process.env});
        break;
    case 'stop':
        getRunningPid((err, pid) => {
            console.log(err)
            if(!err) {
                process.kill(pid, 'SIGTERM');
                console.log('Stopping Menu system. Goodbye! \n');
            }
            else {
                console.log('Menu system is already stopped. \n');
            }
        });
        break;
    case 'restart':
        getRunningPid((err, pid) => {
            console.log(err);
            if(!err) {
                process.kill(pid, 'SIGHUP');
                console.log('Restarting Menu system. Goodbye! \n');
            }
            else {
                console.log('Could not restart Menu system. \n');
            }
        });
        break;
    case 'reload':
        break;
    case 'build':
        break;
    case 'upgrade':
        break;
    case 'upgrade-plugins':
        break;
    case 'dev':
        process.env.NODE_ENV = "development";
        cproc.fork(path.join(__dirname, 'loader.js'), ['--no-daemon','--no-silent'], {env: process.env});
        break;
    default: 
        process.stdout.write('\nWelcome to Menu system ! \n'.yellow);
        process.stdout.write('Useage: ./menu {start|restart|build|stop|reload|upgrade|dev|upgrade-plugins}\n');
        process.stdout.write('\t' + 'start'.yellow + '\t start the Menu server.\n');
        process.stdout.write('\t' + 'stop'.yellow + '\t stop the Menu server.\n');
        process.stdout.write('\t' + 'restart'.yellow + '\t restart the Menu server.\n');
        process.stdout.write('\t' + 'reload'.yellow + '\t reload the Menu server.\n');
        process.stdout.write('\t' + 'build'.yellow + '\t build the Menu server.\n');
        process.stdout.write('\t' + 'upgrade'.yellow + '\t build the Menu server.\n');
        process.stdout.write('\t' + 'dev'.yellow + '\t dev the Menu server.\n');
        process.stdout.write('\t' + 'upgrade-plugins'.yellow + '\t build the Menu server.\n');
        break;
}